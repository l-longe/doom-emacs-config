te-by-moving-to-trash t)

;;autosave
(setq auto-save-visited-interval 5) ; Save after 5s of idle time.
(auto-save-visited-mode t)

;;line wrapping
(setq-default fill-column 120)
(add-hook! '(text-mode-hook prog-mode-hook conf-mode-hook)
           #'display-fill-column-indicator-mode)

;;clipboard and copy and past
(setq select-enable-clipboard t)

;;remove top bar?
(remove-hook!'(window-setup-hook after-make-frame-functions)
#'doom-restore-menu-bar-in-gui-frames-h)

;; Some functionality uses this to identify you, e.g. GPG configuration, email


;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use


;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

(doom/set-frame-opacity 90)

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

(add-hook 'emacs-startup-hook
	(lambda ()
		(treemacs)))

;; save and restore window configuration
(setq +workspaces-on-switch-project-behaviour t)

;;cheatsheet in dashboard?
(defun my/dashboard-cheat-sheet ()
	"Display a cheatsheet on the dashboard"
	(insert "\n")
	(insert (propertize "QUICK REFERENCE:\n" 'face 'font-lock-keyword-face))
	(insert "\n")
	(insert "  FIles & Buffers          Projects            Org/Notes\n")
	(insert "  SPC f f  - Find file      SPC p p - Projects    SPC n n Capture\n")
	(insert "  SPC f r - Resent files    SPC p f - Find File   SPC o a - Agenda\n")
	(insert "  SPC b b - Switch buffer   SPC p / - Search      SPC n j - Journal\n")
	(insert "  SPC f s - Save file       SPC o p - File tree\n")
	(insert "  SPC b k - Close buffer\n")
	(insert "\n")
	(insert "  General                  Help\n")
	(insert "  SPC q q - Quit Emacs     SPC h k - Describe key\n")
	(insert "  SPC t T - Transparency   SPC h f - Descrive function\n")
	(insert "  SPC W V - Split vert     SPC h v - Describe Variable\n")
	(insert "  SPC w s - Split horiz    \n")
	(insert "\n"))

;; adds cheatsheet to dashboard
(after! doom-dashboard	
	(add-hook '+doom-dashboard-functions #'my/dashboard-cheat-sheet t))

;;; --- Dashboard: banner + your cheat sheet ---
(after! doom-dashboard
  ;; Order of widgets (center panel)
  (setq doom-dashboard-functions
        '(doom-dashboard-widget-banner     ; Doom logo (ASCII or image)
          my/dashboard-cheat-sheet         ; your widget
          doom-dashboard-widget-shortmenu
          doom-dashboard-widget-loaded))

  ;; Optional: show an image instead of ASCII
  ;; (must be a real path to png/svg; remove or set to nil for ASCII)
  ;; (setq fancy-splash-image "~/.config/doom/splash.png")
  )

;; Always land on the dashboard
(setq doom-fallback-buffer-name "*doom*"
      +doom-dashboard-name " *doom* ")

;;; --- Open Treemacs alongside the dashboard on startup ---
;; Open Treemacs after the first real buffer (the dashboard) is shown.
(add-hook! 'doom-first-buffer-hook
  (run-with-idle-timer 0.1 nil #'+treemacs/toggle))

;; (Optional) keep Treemacs narrow
(setq treemacs-width  thirty)  ; e.g., 30
